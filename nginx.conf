server {
    listen 80;
    server_name 3.142.124.62; # Use o IP do seu servidor ou o domínio que você está usando (no caso anterior era 3.142.124.62)
                               # Se for para rodar localmente para testes, 'localhost' está ok.

    # O 'root' deve apontar para o diretório PAI onde a pasta 'app' (que conterá o build do Vite) reside.
    # Exemplo: Se você copiar o conteúdo do seu 'dist' para /var/www/html/app/, então o root seria /var/www/html/
    # Se você copiar a pasta 'dist' inteira para /var/www/html/ e renomeá-la para 'app', também funcionaria.
    root /usr/share/nginx/html; # Certifique-se de que o conteúdo do 'dist' do Vite esteja dentro de '/usr/share/nginx/html/app/'

    index index.html; # O arquivo index.html que o Nginx procurará por padrão, se a requisição for para o root.

    # Esta localização lida com todas as requisições que começam com /app/
    # Ela tenta encontrar o arquivo ou diretório correspondente e, se não encontrar,
    # redireciona para /app/index.html, que é o ponto de entrada da sua SPA.
    location /app/ {
        # O $uri $uri/ tenta servir o arquivo diretamente ou o index dentro de um diretório
        # O último /app/index.html é o fallback para o roteamento do lado do cliente (SPA)
        try_files $uri $uri/ /app/index.html;
    }

    # Esta localização é para servir os arquivos estáticos (JS, CSS, imagens etc.)
    # Seus assets estarão em /app/assets/ por causa do 'base: "/app/"' no Vite.
    # Esta regra captura esses assets e aplica as configurações de cache.
    location ~ ^/app/assets/(.*)$ {
        # Como o 'root' já está apontando para o pai de 'app', não precisamos de 'alias' aqui,
        # a menos que a estrutura no disco seja diferente da URL.
        # Se 'root /usr/share/nginx/html;' e o arquivo está em '/usr/share/nginx/html/app/assets/file.js',
        # então o Nginx já saberá o caminho.
        access_log off;
        expires 1y;
        add_header Cache-Control "public, immutable";
        # Se o nginx não encontrar os arquivos aqui, você pode tentar adicionar:
        # try_files $uri =404;
    }


    # Proxy para API
    location /api/ {
        # Importante: O caminho '/api/' na sua URL (ex: http://3.142.124.62/api/...)
        # será passado para o 'proxy_pass'. Se sua API espera '/api/v1/', o rewrite pode ser útil.
        # Neste caso, como você tem 'http://api.solarshare.com.br/api/v1/', e o cliente chamará '/api/',
        # você PRECISA do rewrite para que o Nginx remova o '/api/' antes de enviar para o backend.
        rewrite ^/api/(.*)$ /api/v1/$1 break; # <--- ADICIONADO OU CORRIGIDO
        proxy_pass http://api.solarshare.com.br; # APENAS O DOMÍNIO DA API
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Segurança: Bloqueia acesso a arquivos ocultos (exceto .well-known para Let's Encrypt, etc.)
    location ~ /\.(?!well-known) {
        deny all;
    }
}