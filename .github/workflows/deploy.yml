name: Deploy Docker to EC2

on:
  push:
    branches:
      - main

env:
  EC2_HOST: 3.142.124.62
  PROJECT_DIR: /home/ubuntu/client-solar
  CONTAINER_NAME: solarshare-frontend
  GIT_REPO: https://github.com/Maximuzsz/client-solar.git

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Test SSH Connection
        run: ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST "echo 'SSH connection successful'"

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST << 'ENDSSH'
            set -euo pipefail
            echo "=== Starting deployment ==="
            
            # Variables
            PROJECT_DIR="$HOME/client-solar"
            CONTAINER_NAME="solarshare-frontend"
            GIT_REPO="https://github.com/Maximuzsz/client-solar.git"
            
            # Update system
            echo "=== Updating system ==="
            sudo apt-get update -qq
            sudo apt-get install -y docker.io docker-compose docker-buildx-plugin
            
            # Ensure user has docker permissions
            sudo usermod -aG docker ubuntu || true
            # Apply group changes without needing logout
            newgrp docker || true
            
            # Project setup
            echo "=== Setting up project ==="
            mkdir -p "${PROJECT_DIR}"
            cd "${PROJECT_DIR}"
            
            # Clone if not exists, otherwise pull
            if [ ! -d .git ]; then
              git clone "${GIT_REPO}" .
            else
              git fetch origin
              git reset --hard origin/main
              git clean -fd
            fi
            
            # Node.js dependencies
            if [ -f package.json ]; then
              echo "=== Handling Node.js dependencies ==="
              # Use nvm or existing node
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              
              if ! command -v node &> /dev/null; then
                curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
                source ~/.bashrc
                nvm install --lts
              fi
              
              npm install -g npm@latest
              npm ci
              npm audit fix --force || true
            fi
            
            # Docker operations
            echo "=== Managing Docker containers ==="
            # Stop and remove existing containers
            docker stop "${CONTAINER_NAME}" >/dev/null 2>&1 || true
            docker rm "${CONTAINER_NAME}" >/dev/null 2>&1 || true
            
            # Remove any container using port 80
            docker ps -q --filter "publish=80" | xargs -r docker stop || true
            docker ps -aq --filter "publish=80" | xargs -r docker rm || true
            
            # Build new image
            echo "=== Building Docker image ==="
            export DOCKER_BUILDKIT=1
            docker buildx install
            docker build -t "${CONTAINER_NAME}" .
            
            # Run container
            echo "=== Starting container ==="
            docker run -d \
              -p 80:80 \
              --name "${CONTAINER_NAME}" \
              --restart unless-stopped \
              "${CONTAINER_NAME}"
            
            # Verify deployment
            echo "=== Verifying deployment ==="
            sleep 10
            if ! docker ps --filter "name=${CONTAINER_NAME}" --format '{{.Status}}' | grep -q 'Up'; then
              echo "❌ Container failed to start"
              docker logs "${CONTAINER_NAME}"
              exit 1
            fi
            
            # Cleanup
            echo "=== Cleaning up ==="
            docker system prune -af --volumes || true
            
            echo "✅ Deployment successful!"
          ENDSSH