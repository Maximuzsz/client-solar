name: Deploy Docker to EC2

on:
  push:
    branches:
      - main

env:
  EC2_HOST: 3.142.124.62
  PROJECT_DIR: /home/ubuntu/client-solar
  CONTAINER_NAME: solarshare-frontend
  GIT_REPO: https://github.com/seu-usuario/seu-repositorio.git

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST << 'ENDSSH'
            set -e  # Exit immediately if any command fails
            
            # Definir variáveis dentro da sessão SSH
            PROJECT_DIR="$HOME/client-solar"
            CONTAINER_NAME="solarshare-frontend"
            GIT_REPO="https://github.com/seu-usuario/seu-repositorio.git"

            echo "Verifying/creating project directory at ${PROJECT_DIR}..."
            mkdir -p "${PROJECT_DIR}"
            cd "${PROJECT_DIR}" || { echo "Failed to enter project directory"; exit 1; }

            # Check if directory is a git repository
            if [ ! -d .git ]; then
              echo "Cloning repository for the first time..."
              git clone "${GIT_REPO}" .
            fi

            echo "Pulling latest changes..."
            git pull origin main

            echo "Installing/updating dependencies..."
            # Adapte para seu gerenciador de pacotes (npm, yarn, pip, etc.)
            if [ -f package.json ]; then
              npm ci
            fi

            echo "Stopping and removing previous container..."
            docker stop "${CONTAINER_NAME}" >/dev/null 2>&1 || true
            docker rm "${CONTAINER_NAME}" >/dev/null 2>&1 || true

            echo "Building new Docker image..."
            docker build -t "${CONTAINER_NAME}" .

            echo "Starting new container..."
            docker run -d \
              -p 80:80 \
              --name "${CONTAINER_NAME}" \
              --restart unless-stopped \
              "${CONTAINER_NAME}"

            echo "Verifying container is running..."
            sleep 5  # Dê tempo para o container iniciar
            docker ps --filter "name=${CONTAINER_NAME}" --format '{{.Status}}' | grep 'Up' || \
              { echo "Container failed to start"; exit 1; }

            echo "Deployment completed successfully!"
          ENDSSH