name: Deploy Docker to EC2

on:
  push:
    branches:
      - main

env:
  EC2_HOST: 3.142.124.62
  PROJECT_DIR: /home/ubuntu/client-solar
  CONTAINER_NAME: solarshare-frontend
  GIT_REPO: https://github.com/Maximuzsz/client-solar.git

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST << 'ENDSSH'
            set -e  # Exit immediately if any command fails
            
            # Definir variáveis
            PROJECT_DIR="$HOME/client-solar"
            CONTAINER_NAME="solarshare-frontend"
            GIT_REPO="https://github.com/Maximuzsz/client-solar.git"

            echo "=== Atualizando sistema e instalando dependências ==="
            sudo apt-get update -qq
            sudo apt-get install -y docker-buildx-plugin

            echo "=== Configurando ambiente do projeto ==="
            mkdir -p "${PROJECT_DIR}"
            cd "${PROJECT_DIR}" || { echo "Failed to enter project directory"; exit 1; }

            if [ ! -d .git ]; then
              echo "Clonando repositório..."
              git clone "${GIT_REPO}" .
            fi

            echo "Atualizando código..."
            git pull origin main

            echo "=== Resolvendo problemas de dependências ==="
            if [ -f package.json ]; then
              echo "Atualizando npm..."
              npm install -g npm@latest

              echo "Instalando dependências..."
              npm ci
              
              echo "Corrigindo vulnerabilidades..."
              npm update eslint @humanwhocodes/object-schema @humanwhocodes/config-array
              npm audit fix --force || true
            fi

            echo "=== Gerenciando containers Docker ==="
            echo "Parando containers conflitantes..."
            docker ps -q --filter "publish=80" | xargs -r docker stop | xargs -r docker rm || true
            docker stop "${CONTAINER_NAME}" >/dev/null 2>&1 || true
            docker rm "${CONTAINER_NAME}" >/dev/null 2>&1 || true

            echo "=== Construindo nova imagem ==="
            echo "Configurando BuildKit..."
            export DOCKER_BUILDKIT=1
            docker buildx install

            echo "Construindo imagem Docker..."
            docker buildx build --load -t "${CONTAINER_NAME}" .

            echo "=== Iniciando aplicação ==="
            echo "Iniciando novo container..."
            docker run -d \
              -p 80:80 \
              --name "${CONTAINER_NAME}" \
              --restart unless-stopped \
              "${CONTAINER_NAME}"

            echo "=== Verificando deploy ==="
            sleep 5
            docker ps --filter "name=${CONTAINER_NAME}" --format '{{.Status}}' | grep 'Up' || \
              { echo "Falha ao iniciar container"; docker logs "${CONTAINER_NAME}"; exit 1; }

            echo "=== Limpeza ==="
            docker system prune -af --volumes

            echo "✅ Deploy concluído com sucesso!"
          ENDSSH