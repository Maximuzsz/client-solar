name: Deploy Docker to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        env:
          HOST: 3.142.124.62
          USER: ubuntu
          PROJECT_DIR: /home/ubuntu/client-solar
          IMAGE_NAME: solarshare-frontend
          CONTAINER_NAME: solarshare-frontend
          GIT_REPO: https://github.com/Maximuzsz/client-solar.git
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST /bin/bash << 'EOSSH'
            set -euxo pipefail

            echo "üìÅ Criando diret√≥rio do projeto (se necess√°rio)..."
            sudo mkdir -p "$PROJECT_DIR"
            sudo chown -R $USER:$USER "$PROJECT_DIR"

            cd "$PROJECT_DIR"

            echo "üì• Sincronizando reposit√≥rio..."
            if [ ! -d .git ]; then
              git clone "$GIT_REPO" .
            else
              git fetch origin main
              git reset --hard origin/main
            fi

            echo "üê≥ Parando container antigo (se houver)..."
            docker stop "$CONTAINER_NAME" 2>/dev/null || true
            docker rm "$CONTAINER_NAME" 2>/dev/null || true

            if [ -f package.json ]; then
              echo "üîß Instalando depend√™ncias e buildando com mais mem√≥ria..."
              npm ci
              # Exporta vari√°vel para dar mais heap pro node no build
              export NODE_OPTIONS="$NODE_OPTIONS"
              npm run build
            fi

            echo "üê≥ Buildando imagem Docker..."
            docker build -t "$IMAGE_NAME" .

            echo "üöÄ Subindo novo container..."
            docker run -d \
              --name "$CONTAINER_NAME" \
              -p 80:80 \
              --restart unless-stopped \
              "$IMAGE_NAME"

            echo "‚úÖ Deploy finalizado com sucesso!"
          EOSSH
