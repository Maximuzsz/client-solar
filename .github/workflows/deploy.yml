name: Deploy Docker to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        env:
          HOST: 3.142.124.62
          USER: ubuntu
          PROJECT_DIR: /home/ubuntu/client-solar
          IMAGE_NAME: solarshare-frontend
          CONTAINER_NAME: solarshare-frontend
          GIT_REPO: https://github.com/your-username/your-repo.git  # UPDATE THIS
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST /bin/bash << 'EOSSH'
            set -e  # Exit immediately if any command fails
            
            # Verify and create project directory
            echo "üìÅ Verifying project directory: $PROJECT_DIR"
            sudo mkdir -p "$PROJECT_DIR"
            sudo chown -R $USER:$USER "$PROJECT_DIR"
            
            cd "$PROJECT_DIR" || {
              echo "‚ùå Failed to access project directory"; 
              exit 1
            }

            # Git repository setup
            if [ ! -d .git ]; then
              echo "üì• Cloning repository..."
              git clone "$GIT_REPO" .
            else
              echo "üì• Updating repository..."
              git fetch --all
              git reset --hard origin/main
            fi

            # Docker operations
            echo "üßπ Cleaning old containers..."
            docker stop "$CONTAINER_NAME" 2>/dev/null || true
            docker rm "$CONTAINER_NAME" 2>/dev/null || true

            echo "üê≥ Building Docker image..."
            docker build -t "$IMAGE_NAME" .

            echo "üöÄ Starting container..."
            docker run -d \
              --name "$CONTAINER_NAME" \
              -p 80:80 \
              --restart unless-stopped \
              "$IMAGE_NAME"

            echo "‚úÖ Deployment completed successfully!"
          EOSSH