name: Deploy Docker to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}  # Recomendo mover para secrets
          USER: ubuntu
          PROJECT_DIR: /home/ubuntu/client-solar
          IMAGE_NAME: solarshare-frontend
          CONTAINER_NAME: solarshare-frontend
          GIT_REPO: https://github.com/Maximuzsz/client-solar.git
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST /bin/bash << 'EOSSH'
            set -e
            echo "🚀 Iniciando processo de deploy..."

            # 1. Preparar ambiente
            echo "📁 Criando/atualizando diretório do projeto..."
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"

            # 2. Atualizar código
            echo "📥 Sincronizando repositório..."
            if [ ! -d .git ]; then
              git clone "$GIT_REPO" .
            else
              git fetch origin main
              git reset --hard origin/main
              git clean -fd
            fi

            # 3. Instalar dependências e buildar
            echo "🔧 Instalando dependências..."
            npm ci --omit=dev  # Instala apenas dependências de produção

            echo "🏗️ Realizando build..."
            npm run build

            # 4. Gerenciar containers Docker
            echo "🐳 Gerenciando containers..."
            EXISTING_CONTAINER=$(docker ps -aq -f name="$CONTAINER_NAME")
            
            if [ "$EXISTING_CONTAINER" ]; then
              echo "⏹️ Parando container existente..."
              docker stop "$CONTAINER_NAME"
              docker rm "$CONTAINER_NAME"
            fi

            # 5. Buildar e rodar nova imagem
            echo "🐳 Buildando nova imagem Docker..."
            docker build -t "$IMAGE_NAME" .

            echo "🚀 Iniciando novo container..."
            docker run -d \
              --name "$CONTAINER_NAME" \
              -p 80:80 \
              -p 443:443 \
              --restart unless-stopped \
              "$IMAGE_NAME"

            # 6. Limpeza
            echo "🧹 Limpando imagens antigas..."
            docker image prune -af --filter "until=24h"

            echo "🎉 Deploy concluído com sucesso!"
          EOSSH